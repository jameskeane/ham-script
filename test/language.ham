import Backbone, _ from "vendor/backbone";

var x:number = 3;
var y = [1, 2, 3];

// List comprehensions
var squares = [x*x | x <- y];
console.log(squares);

// Everything is an object
3.times {
  console.log('Hello World!');
};

var Backbone = { Model: {} };

// OOP style classes
class Hamburger extends Backbone.Model {
  add: |x, y| { x + y },
  subtract: |x, y| { x - y},

  // operator overloading
  operator+: |o| { this + o },
  operator-: |o| { this - o },
  operator*: |o| { this - o }
};

// yet still prototypical, i.e. modifying prototype
String::startsWith = |x| { 2 };

// if you have a lambda with a single expression as it's body it will be
// converted into a return statement.

// functional programming
[1, 2, 3].map(|x| { x*2 });
[2, 3, 4].filter(|x| { x % 2 });
[1, 2, 3].reduce(|x, r| { r += x });


