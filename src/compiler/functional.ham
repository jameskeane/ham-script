var _ = require('underscore');
var ASTNode = require('./node');

class ListComprehension extends ASTNode {
  serialize: |state| {
    // collect params and providers
    var params = [];
    var providers = [];

    var first = this.elements[6];
    params.push(first.ident_p.textValue);
    providers.push(first.expr.walk(state));

    this.elements[7:-2].each |p| {
      if(p.textValue is '') { return; };

      p = p.elements[0].elements[3];
      if(p.ident_p is undefined or p.expr is undefined) { return;  };
      
      params.push(p.ident_p.textValue);
      providers.push(p.expr.walk(state));
    };

    this.source.add('(function() { var tmp = [];');
    _.each(params, |p, i| { 
      this.source.add(['var ', p, '=', providers[i], ';']);
    }.bind(this));

    this.source.add('var evaluator = function('+params.join(', ')+') { return ');
    this.source.add(this.expr.walk(state));
    this.source.add(';};');

    this.source.add('for(var i = 0; i < Math.min('+params.join('.length, ') + '.length); i++) {');
    this.source.add('tmp.push(evaluator('+params.join('[i], ') + '[i]));');
    this.source.add('} return tmp; })()');
  }
};

class Lambda extends ASTNode {  
  serialize: |state| {
    // get the params
    var params = [];
    var guards = [];

    // Is it a no param list lambda?
    if(this.elements[0].textValue isnt '') {
      var first = this.elements[0].elements[2].guard_expr;
      if(first isnt undefined) {
        if(first.guard()) { 
          guards.push(first.walk(state));
          params.push(first.variables(state));
        } else {
          params.push(first.walk(state));
        }
        
        var it = this.elements[0].elements[2].elements[1].elements;
        it.each |el| {
          var g = el.guard_expr;
          if(g.guard()) { 
            guards.push(g.walk(state));
            params.push(g.variables(state));
          } else {
            params.push(g.walk(state));
          }
        };
      }
    }

    this.source.add([
      'function(', params.join(', '), ') {']);

    var source = this.source;
    guards.each |guard| {
      source.add(['if(!(', guard, ')) return undefined;']);
    };

    this.source.add([
        this.funblock.walk(state),
      '}'
    ]);
  }
};

class FunctionInvocation extends ASTNode {
  serialize: |state| {
    this.source.add('(');

    if(this.lambda) {
      this.source.add(this.lambda.walk(state));
    } else if(this.elements[2].textValue isnt '') {
      this.source.add(this.elements[2].walk(state));
    }

    this.source.add(')');
  }
};

module.exports.ListComprehension = ListComprehension;
module.exports.Lambda = Lambda;
module.exports.FunctionInvocation = FunctionInvocation;