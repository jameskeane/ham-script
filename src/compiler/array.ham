var _ = require('underscore');
var ASTNode = require('./node');

class ArrayAccess extends ASTNode {
  serialize: |state| {
    this.source.add(['[', this.elements[2].walk(state), ']']);
  }
};

class ArraySlice extends ASTNode {
  serialize: |state| {
    var start = this.elements[2].start.textValue;
    var end   = this.elements[2].end.textValue;
    var step  = this.elements[2].step.integer;


    if(start isnt '' or end isnt '') {
      if(start is '') { start = 0; }

      this.source.add('.slice('+start);
      if(end isnt '') {
        this.source.add(', '+end);
      }
      this.source.add(')');
    }
    
    if(step) {
      this.source.add('.step(' + step.textValue + ')');
    }
  }
};

class ArrayRange extends ASTNode {
  serialize: |state| {
    this.source.add([
      '(function() {',
        'var acc = [];']);

    if(Number(this.end.textValue) > Number(this.start.textValue)) {
      this.source.add([
        'for(var i = ', this.start.textValue, '; i <= ', this.end.textValue, '; i++) {']);
    } else {
      this.source.add([
        'for(var i = ', this.start.textValue, '; i >= ', this.end.textValue, '; i--) {']);
    }
    this.source.add([
          'acc.push(i);',
        '}',
        'return acc;',
      '})()']);
  }
};

class ArrayDef extends ASTNode {
  serialize: |state| {
    this.source.add('[');

    if(this.elements[2].textValue isnt '') {
      var first = this.elements[2];
      this.source.add(first.expr.elements[0].walk(state));

      first.elements[1].elements.each(|node| {
        this.source.add(', ');
        this.source.add(node.expr.elements[0].walk(state));
      }.bind(this));
    }

    this.source.add(']');
  }
};

module.exports.ArrayAccess = ArrayAccess;
module.exports.ArraySlice = ArraySlice;
module.exports.ArrayRange = ArrayRange;
module.exports.ArrayDef = ArrayDef;
