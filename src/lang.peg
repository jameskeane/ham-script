grammar ham
  root      <- ( _ !statement expr _ / (_ statement _)* ) <HamFile>
  funblock  <- ("{" _ (_ statement _)* "}" / "{" _ expr _ "}") <FunctionalBlock> 
  block     <- "{" _ (_ statement _)* "}" <Block> 

  statement <- variable / class_def / import / return / if_stmt / exprstmt
  exprstmt  <- expr _ ";" <ExprStmt>

  import    <- "import" _ ident (_ "," _ ident)* _ "from" _ string _ ";" <Import>
  class_def <- "class" _ ident _ ("extends" _ ident _)? object _ ";" <ClassDef>
  variable  <- "var" _ ident (":" _ type)? (_ "=" _ expr)? _ ";" <VariableDef>
  return    <- "return" _ expr:expr? _ ";" <ReturnStmt>
  if_stmt   <- "if" _ "(" _ expr _ ")" _ block
               (_ "else" _ "if" _ "(" _ expr _ ")" _ block)*
               (_ "else" _ block)? _ ";"? <IfStmt>

  expr      <- value_acs ( _ binaryop _ value_acs )* <Expression>
  binaryop  <- "or" / "isnt" / "is" / "+=" / "*=" / "/=" / "-=" / "%=" / "==" / "!=" / "**" / [-+=*\^/%]

  value_acs <- value ( (_ "." _ value) / (_ accessor) )* <ValueAccessor>
  value     <- number / new_obj / special / string / object / lambda / listcomp / array / array_rng / proto / chain_pp
  chain_pp  <- "(" _ expr _ ")" <ParenExpression>
  accessor  <- arrayslc / arrayacs / funcall

  pp_expr   <- "(" _ expr _ ")"

  expr_list <- expr ( _ "," _ expr)* <ExprList>
  
  new_obj   <- "new" _ expr _ <ObjectNew>
  array     <- "[" _ expr_list? _ "]" <ArrayNode>
  array_rng <- "[" _ start:(integer / ident) ".." end:(integer / ident) _ "]" <ArrayRange>

  object    <- "{" (object_p ("," object_p)* )? "}" <ObjectNode>
  object_p  <- _ name:(string / obj_name) _ ":" _ expr _
  lambda    <- ("|" _ (ident_p (_ "," _ ident_p)* )? _ "|")? _ funblock <Lambda>
  listcomp  <- "[" _  expr _ "|" _ (ident_p _ "<-" _ expr) (_ "," _ (ident_p _ "<-" _ expr))* _ "]" <ListComprehension>

  funcall   <- (_ lambda _ / "(" _ expr_list? _ ")") <FunctionInvocation>
  arrayacs  <- "[" _ expr _ "]" _ <ArrayAccess>
  arrayslc  <- "[" _ slice _ "]" _ <ArraySlice>

  slice     <- start:integer? ":" end:integer? step:(":" integer)?
  type      <- "string" / "number" / ident  <Type>
  string    <- ("\"" ( [^"\\] / ("\\" ["bfnrt\\/]) / hex )* "\"" 
             / "'" ( [^'\\] / ("\\" ["bfnrt\\/]) / hex )* "'") <StringNode>
  number    <- "-"? ( ("0" / [1-9] [0-9]*) ("." [0-9]+)? ( ("e" / "E") ("+" / "-")? [0-9]+ )? ) <NumberNode>
  integer   <- "-"? ([0] / [1-9] [0-9]*)

  proto     <- ident ("::" ident_p)? <PrototypeExpander>
  ident     <- ident_p ("." ident_p)* <Identifier>
  ident_p   <- [$_a-zA-Z] [$_a-zA-Z0-9]* 
  obj_name  <- "operator" [^:]* / ident_p
  special   <- ("true" / "false" / "null") <SpecialNode>
  hex       <- "\\u" [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F]

  _         <- (("//" [^\n]* [\n]) / [ \n\t])*
